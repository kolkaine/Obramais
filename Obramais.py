# app.py ‚Äî Or√ßamento de Materiais de Obra (m¬≤ / m¬≥) com exporta√ß√£o Excel, PDF, CSV e DOCX
#
# Execute localmente:  streamlit run app.py
# Depend√™ncias sugeridas (requirements.txt):
#   streamlit
#   pandas
#   reportlab
#   openpyxl
#   XlsxWriter
#   python-docx
#
# Observa√ß√£o:
# - Inclui par√¢metros t√≠picos de cobertura por material como refer√™ncia.
# - Permite inserir custos adicionais (m√£o de obra, impostos).
# - Exporta para Excel, PDF, CSV e DOCX.

import streamlit as st
import pandas as pd
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from docx import Document

# ---------- Fun√ß√µes utilit√°rias ----------
def calc_qtd_necessaria(medida: float, cobertura_por_unidade: float, desperdicio_pct: float) -> float:
    if cobertura_por_unidade <= 0:
        return 0.0
    fator = 1 + (desperdicio_pct or 0) / 100.0
    return (medida / cobertura_por_unidade) * fator

def add_item(material: str, medida: float, cobertura: float, unidade: str,
             desperdicio: float, preco_unit: float, especificacoes: dict):
    qtd = calc_qtd_necessaria(medida, cobertura, desperdicio)
    qtd = round(qtd, 3)
    subtotal = round((preco_unit or 0.0) * qtd, 2)
    item = {
        "Material": material,
        "Medida": medida,                       # m¬≤ ou m¬≥ conforme o caso
        "Cobertura por Unidade": cobertura,     # quanto 1 unidade cobre (m¬≤ ou m¬≥)
        "Unidade": unidade,                     # lata, saco, pe√ßa, m¬≥, m¬≤, un etc.
        "Desperd√≠cio (%)": desperdicio,
        "Qtd Necess√°ria": qtd,
        "Pre√ßo Unit√°rio": float(preco_unit or 0.0),
        "Subtotal": subtotal,
    }
    item.update(especificacoes)  # adiciona campos extras espec√≠ficos do material
    st.session_state["items"].append(item)

def df_resumo() -> pd.DataFrame:
    data = st.session_state.get("items", [])
    return pd.DataFrame(data) if data else pd.DataFrame()

def make_excel_bytes(df: pd.DataFrame) -> bytes:
    buffer = io.BytesIO()
    with pd.ExcelWriter(buffer, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="Or√ßamento")
    return buffer.getvalue()

def make_pdf_bytes(df: pd.DataFrame, projeto: str, cliente: str, responsavel: str, custos_extra: dict) -> bytes:
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=24, leftMargin=24, topMargin=24, bottomMargin=24)
    styles = getSampleStyleSheet()
    story = []

    titulo = f"Or√ßamento de Materiais ‚Äî {projeto}"
    story.append(Paragraph(titulo, styles["Title"]))
    meta = f"Cliente: {cliente or '-'} | Respons√°vel: {responsavel or '-'} | Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}"
    story.append(Paragraph(meta, styles["Normal"]))
    story.append(Spacer(1, 12))

    if not df.empty:
        header = list(df.columns)
        data = [header] + [[str(r[c]) for c in df.columns] for _, r in df.iterrows()]
        t = Table(data, repeatRows=1)
        t.setStyle(TableStyle([
            ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
            ("GRID", (0,0), (-1,-1), 0.25, colors.grey),
        ]))
        story.append(t)
        story.append(Spacer(1, 12))
        total = float(df["Subtotal"].sum()) if "Subtotal" in df.columns else 0.0
        total_final = total + float(custos_extra.get("mao_obra", 0)) + float(custos_extra.get("impostos", 0))
        story.append(Paragraph(f"<b>Materiais:</b> R$ {total:.2f}", styles["Normal"]))
        story.append(Paragraph(f"<b>M√£o de obra:</b> R$ {float(custos_extra.get('mao_obra',0)):.2f}", styles["Normal"]))
        story.append(Paragraph(f"<b>Impostos:</b> R$ {float(custos_extra.get('impostos',0)):.2f}", styles["Normal"]))
        story.append(Paragraph(f"<b>Total:</b> R$ {total_final:.2f}", styles["Heading3"]))

    doc.build(story)
    return buffer.getvalue()

def make_csv_bytes(df: pd.DataFrame) -> bytes:
    return df.to_csv(index=False, sep=";").encode("utf-8")

def make_docx_bytes(df: pd.DataFrame, projeto: str, cliente: str, responsavel: str, custos_extra: dict) -> bytes:
    doc = Document()
    doc.add_heading(f"Or√ßamento de Materiais ‚Äî {projeto}", 0)
    doc.add_paragraph(f"Cliente: {cliente or '-'}")
    doc.add_paragraph(f"Respons√°vel: {responsavel or '-'}")
    doc.add_paragraph(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    doc.add_paragraph("")

    if not df.empty:
        table = doc.add_table(rows=1, cols=len(df.columns))
        hdr_cells = table.rows[0].cells
        for i, col in enumerate(df.columns):
            hdr_cells[i].text = col
        for _, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, val in enumerate(row):
                row_cells[i].text = str(val)

        total = float(df["Subtotal"].sum()) if "Subtotal" in df.columns else 0.0
        total_final = total + float(custos_extra.get("mao_obra", 0)) + float(custos_extra.get("impostos", 0))
        doc.add_paragraph(f"Materiais: R$ {total:.2f}")
        doc.add_paragraph(f"M√£o de obra: R$ {float(custos_extra.get('mao_obra',0)):.2f}")
        doc.add_paragraph(f"Impostos: R$ {float(custos_extra.get('impostos',0)):.2f}")
        doc.add_heading(f"Total: R$ {total_final:.2f}", level=1)

    buffer = io.BytesIO()
    doc.save(buffer)
    return buffer.getvalue()

# ---------- App ----------
st.title("üìê Or√ßamento de Materiais de Constru√ß√£o")

# Inicializa session_state["items"]
if "items" not in st.session_state:
    st.session_state["items"] = []

projeto = st.text_input("Nome do Projeto")
cliente = st.text_input("Cliente")
responsavel = st.text_input("Respons√°vel")

st.subheader("Adicionar Material")

material = st.selectbox("Material", [
    "Tinta", "Cimento", "Ladrilhos", "Madeira", "Pregos", "Cola",
    "Canos", "Janelas", "Gesso", "Blocos", "Tijolos", "Areia", "Brita"
])

medida = st.number_input("√Årea/Volume (m¬≤ ou m¬≥)", min_value=0.0, step=0.1)
cobertura = st.number_input("Cobertura por unidade", min_value=0.0, step=0.1)
unidade = st.text_input("Unidade de Medida (ex: lata, saco, m¬≤, m¬≥, un)")
desperdicio = st.number_input("Desperd√≠cio (%)", min_value=0.0, value=5.0, step=1.0)
preco_unit = st.number_input("Pre√ßo unit√°rio (R$)", min_value=0.0, step=0.1)

# Campos extras por material
especificacoes = {}
if material == "Madeira":
    especificacoes["Medidas (m)"] = st.text_input("Medidas da madeira (ex: 2.5 x 0.1 x 0.03)")
elif material == "Cola":
    especificacoes["Tipo"] = st.selectbox("Tipo de cola", ["Hidr√°ulica", "Madeira", "Universal", "PVC"])
elif material == "Canos":
    especificacoes["Di√¢metro"] = st.text_input("Di√¢metro do cano (mm)")
    especificacoes["Uso"] = st.selectbox("Uso do cano", ["Pia", "Privada", "Esgoto", "√Ågua fria", "√Ågua quente", "Pluvial"])
elif material == "Janelas":
    especificacoes["Altura (m)"] = st.number_input("Altura da janela (m)", min_value=0.0, step=0.1)
    especificacoes["Largura (m)"] = st.number_input("Largura da janela (m)", min_value=0.0, step=0.1)
elif material == "Blocos":
    especificacoes["Medida do bloco (cm)"] = st.text_input("Medida do bloco (ex: 14x19x39)")
elif material == "Tijolos":
    especificacoes["Medida do tijolo (cm)"] = st.text_input("Medida do tijolo (ex: 9x19x29)")
elif material == "Areia":
    especificacoes["Tipo de areia"] = st.selectbox("Tipo de areia", ["Fina", "M√©dia", "Grossa"])
elif material == "Brita":
    especificacoes["Tipo de brita"] = st.selectbox("Tipo de brita", ["N¬∫ 0", "N¬∫ 1", "N¬∫ 2", "N¬∫ 3"])

if st.button("Adicionar Material"):
    add_item(material, medida, cobertura, unidade, desperdicio, preco_unit, especificacoes)
    st.success(f"{material} adicionado ao or√ßamento!")

st.subheader("Resumo dos Itens")
df = df_resumo()
if not df.empty:
    st.dataframe(df)

    st.subheader("Custos Extras")
    mao_obra = st.number_input("Custo de m√£o de obra (R$)", min_value=0.0, step=0.1)
    impostos = st.number_input("Impostos (R$)", min_value=0.0, step=0.1)
    custos_extra = {"mao_obra": mao_obra, "impostos": impostos}

    total = float(df["Subtotal"].sum()) if "Subtotal" in df.columns else 0.0
    total_final = total + mao_obra + impostos
    st.write(f"**Total Materiais:** R$ {total:.2f}")
    st.write(f"**Total Final (com m√£o de obra e impostos):** R$ {total_final:.2f}")

    st.subheader("Exportar Or√ßamento")
    st.download_button("üìä Baixar Excel", make_excel_bytes(df), "orcamento.xlsx")
    st.download_button("üìÑ Baixar PDF", make_pdf_bytes(df, projeto, cliente, responsavel, custos_extra), "orcamento.pdf")
    st.download_button("üìù Baixar CSV", make_csv_bytes(df), "orcamento.csv")
    st.download_button("üìë Baixar DOCX", make_docx_bytes(df, projeto, cliente, responsavel, custos_extra), "orcamento.docx")
else:
    st.info("Nenhum item adicionado ainda.")